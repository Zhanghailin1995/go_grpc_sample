// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package greeter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterRequestServiceClient is the client API for GreeterRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterRequestServiceClient interface {
	// Sends a greeting
	XCall(ctx context.Context, in *GreeterRequest, opts ...grpc.CallOption) (*GreeterReply, error)
}

type greeterRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterRequestServiceClient(cc grpc.ClientConnInterface) GreeterRequestServiceClient {
	return &greeterRequestServiceClient{cc}
}

func (c *greeterRequestServiceClient) XCall(ctx context.Context, in *GreeterRequest, opts ...grpc.CallOption) (*GreeterReply, error) {
	out := new(GreeterReply)
	err := c.cc.Invoke(ctx, "/greeter.GreeterRequestService/_call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterRequestServiceServer is the server API for GreeterRequestService service.
// All implementations must embed UnimplementedGreeterRequestServiceServer
// for forward compatibility
type GreeterRequestServiceServer interface {
	// Sends a greeting
	XCall(context.Context, *GreeterRequest) (*GreeterReply, error)
	mustEmbedUnimplementedGreeterRequestServiceServer()
}

// UnimplementedGreeterRequestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterRequestServiceServer struct {
}

func (UnimplementedGreeterRequestServiceServer) XCall(context.Context, *GreeterRequest) (*GreeterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XCall not implemented")
}
func (UnimplementedGreeterRequestServiceServer) mustEmbedUnimplementedGreeterRequestServiceServer() {}

// UnsafeGreeterRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterRequestServiceServer will
// result in compilation errors.
type UnsafeGreeterRequestServiceServer interface {
	mustEmbedUnimplementedGreeterRequestServiceServer()
}

func RegisterGreeterRequestServiceServer(s grpc.ServiceRegistrar, srv GreeterRequestServiceServer) {
	s.RegisterService(&GreeterRequestService_ServiceDesc, srv)
}

func _GreeterRequestService_XCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterRequestServiceServer).XCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greeter.GreeterRequestService/_call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterRequestServiceServer).XCall(ctx, req.(*GreeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GreeterRequestService_ServiceDesc is the grpc.ServiceDesc for GreeterRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreeterRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greeter.GreeterRequestService",
	HandlerType: (*GreeterRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "_call",
			Handler:    _GreeterRequestService_XCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/greeter.proto",
}
